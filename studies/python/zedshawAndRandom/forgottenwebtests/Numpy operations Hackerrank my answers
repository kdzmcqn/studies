import numpy as np
n, m = map(int, input().split())
a, b = (np.array([input().split() for _ in range(n)], dtype=int) for _ in range(2))
print(a+b, a-b, a*b, a//b, a%b, a**b, sep='\n')


import numpy as np
N, M = list(map(int, input().split()))

a1 = np.array([input().split() for _ in range(N)], int)
a2 = np.array([input().split() for _ in range(N)], int)

print(*[eval('a1'+i+'a2') for i in ['+','-','*','//','%','**']], sep='\n')


Using numpy funtion for the operations is faster or just using the mathematical operations?

import numpy as np
N, M = map(int, input().split())
A = np.array([list(map(int, input().split())) for _ in range(N)], int)
B = np.array([list(map(int, input().split())) for _ in range(N)], int)
print(np.add(A,B), np.subtract(A,B), np.multiply(A,B,), np.floor_divide(A,B), np.mod(A,B), np.power(A,B), sep = "\n")


import numpy as np
m,n=raw_input().split()
l=[]
m=[]
for i in range(0,int(n)):
    numbers = map(int, raw_input().split())
    l.append(numbers)
for i in range(0,int(n)):
    numbers = map(int, raw_input().split())
    m.append(numbers)
    
arrA=np.array(l)    
arrB=np.array(m)    

print arrA + arrB
print arrA - arrB
print arrA * arrB
print arrA / arrB
print arrA % arrB
print arrA ** arr